generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---- Core entities ----------------------------------------------------------

model Road {
  id       Int    @id @default(autoincrement())
  name     String
  lengthM  Float

  // back-relations (required so Prisma is happy)
  segments          Segment[]
  sections          Section[]
  surfaceBands      SurfaceBand[]
  aadtBands         AadtBand[]
  statusBands       StatusBand[]
  qualityBands      QualityBand[]
  lanesBands        LanesBand[]
  rowWidthBands     RowWidthBand[]
  municipalityBands MunicipalityBand[]
  bridgeBands       BridgeBand[]
  kmPosts           KmPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Segment {
    id         Int      @id @default(autoincrement())
    roadId     Int
    startM     Float
    endM       Float
    surface    String?
    lanesLeft  Int?
    lanesRight Int?
    status     String?
    quality    String?
    road       Road     @relation(fields: [roadId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

  @@index([roadId, startM, endM])
}

model Section {
  id       Int      @id @default(autoincrement())
  roadId   Int
  startM   Float
  endM     Float
  road     Road     @relation(fields: [roadId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roadId, startM, endM])
}

// ---- Per-band range tables --------------------------------------------------

model SurfaceBand {
  id      Int    @id @default(autoincrement())
  roadId  Int
  startM  Float
  endM    Float
  surface String
  road    Road   @relation(fields: [roadId], references: [id])

  @@index([roadId, startM, endM])
}

model AadtBand {
  id      Int   @id @default(autoincrement())
  roadId  Int
  startM  Float
  endM    Float
  aadt    Int
  road    Road  @relation(fields: [roadId], references: [id])

  @@index([roadId, startM, endM])
}

model StatusBand {
  id      Int    @id @default(autoincrement())
  roadId  Int
  startM  Float
  endM    Float
  status  String
  road    Road   @relation(fields: [roadId], references: [id])

  @@index([roadId, startM, endM])
}

model QualityBand {
  id      Int    @id @default(autoincrement())
  roadId  Int
  startM  Float
  endM    Float
  quality String
  road    Road   @relation(fields: [roadId], references: [id])

  @@index([roadId, startM, endM])
}

// Which side gets the extra lane when LanesBand.lanes is odd
enum SideBias {
  TOP
  BOTTOM
}

model LanesBand {
  id       Int      @id @default(autoincrement())
  roadId   Int
  startM   Float
  endM     Float
  lanes    Int
  sideBias SideBias @default(TOP)
  road     Road     @relation(fields: [roadId], references: [id])

  @@index([roadId, startM, endM])
}

model RowWidthBand {
  id        Int   @id @default(autoincrement())
  roadId    Int
  startM    Float
  endM      Float
  rowWidthM Int
  road      Road  @relation(fields: [roadId], references: [id])

  @@index([roadId, startM, endM])
}

model MunicipalityBand {
  id      Int    @id @default(autoincrement())
  roadId  Int
  startM  Float
  endM    Float
  name    String
  road    Road   @relation(fields: [roadId], references: [id])

  @@index([roadId, startM, endM])
}

model BridgeBand {
  id      Int    @id @default(autoincrement())
  roadId  Int
  startM  Float
  endM    Float
  name    String
  road    Road   @relation(fields: [roadId], references: [id])

  @@index([roadId, startM, endM])
}

// ---- Point events -----------------------------------------------------------

model KmPost {
  id        Int     @id @default(autoincrement())
  roadId    Int     @map("section_id")
  chainageM Float
  lrp       String
  road      Road    @relation(fields: [roadId], references: [id])

  @@index([roadId, chainageM])
}
