// Road Analyzer: each band in its own table + point events for KM posts.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Make sure your DATABASE_URL is set correctly. If you use a dedicated schema:
  // postgresql://user:pass@host:5432/dbname?schema=road_analyzer
  url      = env("DATABASE_URL")
}

model Road {
  id        Int       @id @default(autoincrement())
  name      String
  lengthKm  Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  segments  Segment[]

  // per-band relations
  surface   SurfaceBand[]
  aadt      AadtBand[]
  status    StatusBand[]
  quality   QualityBand[]
  lanes     LanesBand[]
  rowWidth  RowWidthBand[]
  muni      MunicipalityBand[]
  bridge    BridgeBand[]
  kmPosts   KmPost[]
}

// Legacy segment table (kept for compatibility / fallback)
model Segment {
  id         Int     @id @default(autoincrement())
  roadId     Int
  startKm    Float
  endKm      Float

  lanesLeft  Int?
  lanesRight Int?
  surface    String?
  status     String?
  quality    String?
  sidewalk   Boolean?
  aadt       Int?

  road Road  @relation(fields: [roadId], references: [id])

  @@index([roadId, startKm, endKm])
}

// -------- Range bands --------
model SurfaceBand {
  id       Int    @id @default(autoincrement())
  roadId   Int
  startKm  Float
  endKm    Float
  surface  String
  road     Road   @relation(fields: [roadId], references: [id])
  @@index([roadId, startKm, endKm])
}

model AadtBand {
  id       Int   @id @default(autoincrement())
  roadId   Int
  startKm  Float
  endKm    Float
  aadt     Int
  road     Road  @relation(fields: [roadId], references: [id])
  @@index([roadId, startKm, endKm])
}

model StatusBand {
  id       Int    @id @default(autoincrement())
  roadId   Int
  startKm  Float
  endKm    Float
  status   String
  road     Road   @relation(fields: [roadId], references: [id])
  @@index([roadId, startKm, endKm])
}

model QualityBand {
  id       Int    @id @default(autoincrement())
  roadId   Int
  startKm  Float
  endKm    Float
  quality  String
  road     Road   @relation(fields: [roadId], references: [id])
  @@index([roadId, startKm, endKm])
}

model LanesBand {
  id       Int   @id @default(autoincrement())
  roadId   Int
  startKm  Float
  endKm    Float
  lanes    Int
  road     Road  @relation(fields: [roadId], references: [id])
  @@index([roadId, startKm, endKm])
}

model RowWidthBand {
  id        Int    @id @default(autoincrement())
  roadId    Int
  startKm   Float
  endKm     Float
  rowWidthM Float
  road      Road   @relation(fields: [roadId], references: [id])
  @@index([roadId, startKm, endKm])
}

model MunicipalityBand {
  id       Int    @id @default(autoincrement())
  roadId   Int
  startKm  Float
  endKm    Float
  name     String
  road     Road   @relation(fields: [roadId], references: [id])
  @@index([roadId, startKm, endKm])
}

model BridgeBand {
  id       Int    @id @default(autoincrement())
  roadId   Int
  startKm  Float
  endKm    Float
  name     String
  road     Road   @relation(fields: [roadId], references: [id])
  @@index([roadId, startKm, endKm])
}

// -------- Point events --------
model KmPost {
  id     Int    @id @default(autoincrement())
  roadId Int
  km     Float
  label  String
  road   Road   @relation(fields: [roadId], references: [id])
  @@index([roadId, km])
}
